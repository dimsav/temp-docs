{
  
  "0": {
    "title": "",
    "content": "404 . Page not found :( . The requested page could not be found. .",
    "url": "https://dimsav.github.io/temp-docs/404.html",
    "relUrl": "/404.html"
  }
  ,"1": {
    "title": "Button and Form",
    "content": "Button and Form . . Installation Production | Sandbox | Inserting the button | Inserting an inline form | | Options Global Options Example | | Options List Language Options | Payment Options | Button Options | Form Options | Inline Form Options | | Token Received Event handler | | . EveryPay provides a script which is responsible for generating the frontend code required to let the customers fill the card form details securely. . For security and legal reasons, the customer’s card details have to be inserted in a form provided by EveryPay within an iFrame. There are two ways of integrating a card form into a website: . Using the Button | Using the Inline Form | Installation . To install the script, we first need to insert the following code into the html part of our e-commerce site. . Production . &lt;script src=&quot;https://button.everypay.gr/v2/js/everypay.js&quot;&gt;&lt;/script&gt; &lt;script&gt; var everypay = Everypay(&#39;your-public-key&#39;, globalOptions) &lt;/script&gt; . Sandbox . &lt;script src=&quot;https://sandbox-button.everypay.gr/v2/js/everypay.js&quot;&gt;&lt;/script&gt; &lt;script&gt; var everypay = Everypay(&#39;your-public-key&#39;, globalOptions) &lt;/script&gt; . Inserting the button . The button is the most popular way of adding a payment form. When the customer clicks the button, the payment form will appear. . First, we need to add a container #button-container where the button will be inserted into. By default, the container needs to be inside an html &lt;form&gt; for the button to appear. . &lt;form method=&quot;post&quot; action=&quot;{url}&quot;&gt; &lt;div id=&quot;button-container&quot;&gt;&lt;/div&gt; &lt;/form&gt; . Then, we tell EveryPay to insert the button in the container like so. . &lt;script&gt; everypay.button(&#39;#button-container&#39;, buttonOptions); &lt;/script&gt; . The first argument of the everypay.button() method is a string selector declaring where the button should be inserted into. You are free to choose any selector you want as long as the element exists on the page. | The second argument of the everypay.button() method is an object containing the options of the button. Example: buttonOptions = {amount: 100}. | . Inserting an inline form . If we don’t want to show the card form as a popup modal, we can display the form directly into our merchant site. It will appear like so: . To insert the form, we need a container located inside an html &lt;form&gt;. . &lt;form method=&quot;post&quot; action=&quot;#&quot;&gt; &lt;div id=&quot;inline-container&quot;&gt;&lt;/div&gt; &lt;/form&gt; &lt;script&gt; everypay.form(&#39;#button-container&#39;, options); &lt;/script&gt; . To learn more about how to define the options property, see the options page. . Options . Global Options . Global options are settings applied globally to all subsequent everypay.button() calls. . If for instance you want to declare the locale “globally” for every button on the page, you can define it as a global option. . When everypay.button(selector, options) is executed, the options object will be merged with the globalOptions object. . Example . &lt;script&gt; var everypay = Everypay(&#39;your-public-key&#39;, {&#39;locale&#39;: &#39;el&#39;}) // This will display a button with greek text everypay.button(&#39;#button-1&#39;, {&#39;amount&#39;: 100}) // This will display a second button with english text everypay.button(&#39;#button-2&#39;, {&#39;amount&#39;: 100, &#39;locale&#39;: &#39;en&#39;}) &lt;/script&gt; . Options List . Here is the list of all available options. You may set these properties either as global or as button options. . Language Options . Key Description Default . locale | The language of the texts displayed to customers. Can be &#39;en&#39; or &#39;el&#39;. | &#39;el&#39; | . Payment Options . Key Description Default . amount (required) | An integer declaring the amount in cents that will be charged. |   | . max_installments | An integer declaring the maximum number of installments. | 0 | . txn_type | For advanced merchants only. Possible values tds, no-tds, moto |   | . Button Options . Key Description Default . button_text | The text displayed inside the button | &#39;Pay with card&#39; when english is selected. | . button_background_color | The value of the css property background-color | &#39;#2b6cb0&#39; | . button_hover_background_color | The value of the css property hover:background-color | &#39;#2c5282&#39; | . button_text_color | The color of the text | &#39;#ffffff&#39; | . button_hover_text_color | The color of the text on hover | &#39;#ffffff&#39; | . button_border_color | The color of the border | Defaults to the color of the background | . button_hover_border_color | The color of the border on hover | Defaults to the color of the background on hover | . button_full_width | A boolean indicating if the button should be a full width element | false | . button_radius | The value of the css property border-radius | &#39;4px&#39; | . button_font_family | The value of the css property font-family |   | . button_font_weight | The value of the css property font-weight |   | . button_font_size | The value of the css property font-size | &#39;15px&#39;&#39; | . Form Options . These settings apply both to the modal and the inline form. . Key Description Default . form_button_text | The text displayed in the button below the card form | &#39;Pay 12,00 €&#39; when english is selected. | . form_button_background_color | The color of the submit button below the card form | &#39;#2b6cb0&#39; | . form_button_text_color | The text color of the submit button below the card form | &#39;#ffffff&#39; | . Inline Form Options . Key Description Default . form_button_hide | Boolean to indicate whether the button below the card form should be hidden. This can be useful when the inline form is submitted programmatically. | false | . Token Received Event handler . It is possible to define a function that is executed by EveryPay’s script when the card form generates a valid card token. . When a card token is generated, the default behavior of EveryPay’s script is to append the token as a hidden input and submit the html form in the merchant’s site. To provide a better user experience, we might want to change this default behavior and do something custom. . A typical example would be to attempt to make the payment with an ajax request and if the payment fails, to show an error inside the card form and let the user enter a different card. . &lt;script&gt; everypay.button(&#39;#button-container&#39;, { &quot;amount&quot;: 1200, &quot;on_token_received&quot;: function(token, showError, hideForm) { // We got a card token. Let&#39;s try to make the payment... if (paymentWasSuccessful) { hideForm() // close modal // show success message } else { showError(&#39;Invalid card&#39;) // show error on card form } } }); &lt;/script&gt; . The three arguments provided by EveryPay are: . token: Contains the card token as a string. | showError: This is a function that displays an error inside the card form | hideForm: This closes the card form modal | showError(string) . The function showError() accepts an error argument that can have two types: . A string containing the error message to display. This will place the input string right below the card input. If showError(&#39;Invalid card&#39;) is executed, then the message will appear like so: . . &lt;script&gt; everypay.button(&#39;#button-container&#39;, { &quot;amount&quot;: 1200, &quot;on_token_received&quot;: function(token, showError, hideForm) { // failed ajax request showError(&#39;Invalid card&#39;) } }); &lt;/script&gt; . showError(object) . The function showError() can also accept an error object returned by the EveryPay API payment request. . &lt;script&gt; everypay.button(&#39;#button-container&#39;, { &quot;amount&quot;: 1200, &quot;on_token_received&quot;: function(token, showError, hideForm) { paymentResponse = ajaxPaymentToMerchantBackend(token) // var paymentResponse = {&quot;error&quot;: { // &quot;status&quot;: 401, // &quot;message&quot;: &quot;Client should contact issuing bank&quot;, // &quot;code&quot;: 40060 // }}; if (paymentResponse.error) { showError(paymentResponse) } else { window.location = &#39;success-url&#39; } } }); &lt;/script&gt; . . The showError will return a user friendly message, depending on the error code we received from the payment API call. .",
    "url": "https://dimsav.github.io/temp-docs/button-and-payment-form/",
    "relUrl": "/button-and-payment-form/"
  }
  ,"2": {
    "title": "Sandbox",
    "content": "EveryPay Sandbox . To test and integrate EveryPay products you are free to use a sandbox account. . Registration . To create a sandbox merchant account visit the sandbox dashboard. . After signing in, you can access your api keys under the menu “Settings” &gt; “API Keys’ . Testing the payment form . You can test the payment form on our sandbox demo page. . By using your public api key in the demo, you can obtain a test payment token you can consume with your api. . Sandbox API . With your sandbox api keys, you can use the sandbox API. The base URL is: . https://sandbox-api.everypay.gr .",
    "url": "https://dimsav.github.io/temp-docs/sandbox/",
    "relUrl": "/sandbox/"
  }
  ,"3": {
    "title": "API",
    "content": "EveryPay API .",
    "url": "https://dimsav.github.io/temp-docs/api/",
    "relUrl": "/api/"
  }
  ,"4": {
    "title": "Home",
    "content": "EveryPay Documentation Home . . Demo | Authentication Authentication with CURL | Authentication with PHP | Caution | | Response codes | Your account Account creation – Company creation | Public, Private and Shared keys (ΑPI keys) | Test transactions | | . EveryPay provides a REST API, where all the responses are given in JSON format. . Demo . For a demo of how to make a payment, visit the Payment Demo. . Authentication . To be authenticated as an EveryPay API user, you need to use your private key, either from your sandbox account or your regular account. The system uses HTTP Basic authentication. Your key will serve as the username you specify during the process, leaving the username blank. . You need to use your private key in every payment request to our API. With the public key you can only create tokens for use in future transactions, for which your private key will be required. . Private key authentication example: . Authentication with CURL . curl https://api.everypay.gr/payments -u sk_PqSohnrYrRI1GUKOZvDkK5VVWAhnlU3R: // parameters -d key=value . Authentication with PHP . // Set your private key Everypay::setApiKey(&#39;sk_PqSohnrYrRI1GUKOZvDkK5VVWAhnlU3R&#39;); $payment = Payment::create(array( // parameters key =&gt; value )); . Note that in the case of API calls with curl, the semicolon is not part of the key, but is given as a separator between the username (key) and the password (blank). . Caution . Please keep your private keys safe and do not share them with anyone. These private keys carry extremely confidential information about your account and your transactions. | Due to the security of the transactions, all requests for your transactions must be made via https. Applications made in any other way will fail. | The tokens, IDs, cards, payments, customers, etc., as well as the public and private keys shown in the examples, are random and have no real impact. | . Response codes . The JSON object of the service response contains, in the event of an error, some fields that characterize the transaction: . the status field that matches the HTTP status code | the code field, which is unique to the result of the request | the message field that directly explains the state in which the transaction was found | . Example of an error response: . { &quot;error&quot;: { &quot;status&quot;: 400, &quot;code&quot;: 20008, &quot;message&quot;: &quot;Card holder name is empty or too long (max. 255 chars).&quot; } } . Your account . EveryPay provides a flexible administration platform. Some functionality of which, we cover in this section. . Account creation – Company creation | Public, Private and Shared keys (ΑPI keys) | Test transactions | . Account creation – Company creation . Once you’ve registered with EveryPay, select the “Company” tab at your dashboard settings. There, you can fill in the company creation form, where you will need to enter: . the company’s Tax Number | a contact phone (make sure it is up to date for your convenience) | and the bank account where you business can accept payments | . A brief verification process will be followed by EveryPay, and once approved, transactions will be allowed for this company. . Your company now has a unique pair of public and private key and can accept card payments, once it has been activated and certified by EveryPay. Through the dashboard, you can deactivate your account at any time (irreversible process). . Public, Private and Shared keys (ΑPI keys) . Each company uses a pair of a public and a private key. In more specific cases, it uses a third public key called a shared key. . The Public Key is used to identify the company in calls through the everypay.js Javascript library or through the button function. The only function that can be performed with this key is the Token version. . The Private Key is used to perform all other types of API transactions, such as creating and listing payments, customers, and more. It is used within the code of your application, so, only your application should be aware of it. . The Shared Key is intended for use by potential partners of your company, who wish to execute transactions through your account for you. This key can only execute payment and pre-approved transactions. . Through your dashboard environment you have the ability to enroll the keys at any time upon your request. Of course, you will also need to update your applications in order to use the new keys. . Test transactions . The EveryPay Sandbox platform, where you can execute transactions in a virtual environment is located at https://sandbox-dashboard.everypay.gr. The platform is exactly the same as the production environment, so, you can easily switch to it, by changing the public and private keys in your application. It is recommended that you test transactions in the sandbox environment, before making use of the EveryPay service in your application. .",
    "url": "https://dimsav.github.io/temp-docs/",
    "relUrl": "/"
  }
  ,"5": {
    "title": "Payment Demo",
    "content": "Payment Demo . The first step to make a payment is to know our API keys. . We will need the public key (starting with pk_) and the secret key (starting with sk_). | . Then let’s add a card form into our website. . The button and the card form . Add the following code into your website’s html. . &lt;form method=&quot;post&quot; action=&quot;{your-endpoint}&quot;&gt; &lt;h1&gt;Checkout&lt;/h1&gt; &lt;div id=&quot;button-container&quot;&gt;&lt;/div&gt; &lt;/form&gt; &lt;script src=&quot;https://sandbox-button.everypay.gr/v2/js/everypay.js&quot;&gt;&lt;/script&gt; &lt;script&gt; var everypay = Everypay(&#39;{your-public-key}&#39;); everypay.button(&#39;#button-container&#39;, {&quot;amount&quot;: 1200}); &lt;/script&gt; . Make sure to replace {your-endpoint} with a POST endpoint on your site. | Also, replace {your-public-key} with your key. | . When the card details are entered into the card form, the script will append the card token into the form as hidden input named everypay_token and will submit the form on your backend. . Charging the card . Now, on your site’s backend, you need to handle the post request created by the form. . This code below is written in PHP using Laravel and EveryPay’s PHP SDK. . You can install the sdk using composer: . composer require everypay/everypay-php . Then, in our backend, we handle the form and make a request to the payments API. . // Controller use EveryPay EveryPay; use EveryPay Payment; public function postAction(){ $tokenFromForm = request(&#39;everypay_token&#39;); Everypay::setApiKey(&#39;{your-private-key}&#39;); Everypay::$isTest = true; // only for sandbox $paymentRequest = Payment::create([ &#39;amount&#39; =&gt; 1200, &#39;token&#39; =&gt; $tokenFromForm ]); if (isset($paymentRequest-&gt;error)) { echo &#39;Error &#39;.$paymentRequest-&gt;error-&gt;code.&#39;: &#39;.$re-&gt;error-&gt;message; } else { echo &#39;Payment was successful!&#39;; } } . Congratulations! You’ve just completed a test card payment. .",
    "url": "https://dimsav.github.io/temp-docs/payment-demo.html",
    "relUrl": "/payment-demo.html"
  }
  
}